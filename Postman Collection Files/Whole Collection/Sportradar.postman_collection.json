{
	"info": {
		"_postman_id": "b4cf0933-2121-4ecd-b0d6-a996626c07b8",
		"name": "Sportradar",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25222285"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Register",
					"item": [
						{
							"name": "Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"ID field is present\", function () {",
											"    pm.expect(jsonData).to.have.property('id');",
											"});",
											"",
											"pm.test(\"Token field is present\", function () {",
											"    pm.expect(jsonData).to.have.property('token');",
											"});",
											"",
											"// Test that the response time is less than 1000ms (1 second - example of perforamnce test)",
											"pm.test(\"Response time is less than 1000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"janet.weaver@reqres.in\",\n    \"password\": \"pistol\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/register",
									"host": [
										"{{URL}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register - missing password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Error message should be 'Missing password'\", function () {",
											"    pm.expect(jsonData.error).to.eql('Missing password');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"janet.weaver@reqres.in\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/register",
									"host": [
										"{{URL}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register - invalid email format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Error message should be 'Invalid email format'\", function () {",
											"    pm.expect(jsonData.error).to.eql('Invalid email format');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"janet.weaver\",\n    \"password\": \"pistol\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/register",
									"host": [
										"{{URL}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Token field is present\", function () {",
											"    pm.expect(jsonData).to.have.property('token');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"cityslicka21\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/login",
									"host": [
										"{{URL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - wrong password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Error message should be 'Wrong password'\", function () {",
											"    pm.expect(jsonData.error).to.eql('Wrong password');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\":\"wrongpassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/login",
									"host": [
										"{{URL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - missing credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Error message should be 'Email and password are required.'\", function () {",
											"    pm.expect(jsonData.error).to.eql('Email and password are required.');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/login",
									"host": [
										"{{URL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Logout",
					"item": [
						{
							"name": "Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Response is empty\", function () {",
											"    pm.expect(Object.keys(jsonData).length).to.eql(0);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/logout",
									"host": [
										"{{URL}}"
									],
									"path": [
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout - user not logged in",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Error message should be 'No active session exists'\", function () {",
											"    pm.expect(jsonData.error).to.eql('No active session exists');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/logout",
									"host": [
										"{{URL}}"
									],
									"path": [
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Error message should be 'Session token is invalid.'\", function () {",
											"    pm.expect(jsonData.error).to.eql('Session token is invalid.');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/logout",
									"host": [
										"{{URL}}"
									],
									"path": [
										"logout"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "Update User",
					"item": [
						{
							"name": "Update User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var expectedName = pm.environment.get(\"TEST_NAME\");",
											"var expectedJob = pm.environment.get(\"TEST_JOB\");",
											"",
											"pm.test(\"Name should be equal to environment variable TEST_NAME\", function () {",
											"    pm.expect(jsonData.name).to.eql(expectedName);",
											"});",
											"",
											"// Assert that the 'job' field equals the environment variable 'TEST_JOB'",
											"pm.test(\"Job should be equal to environment variable TEST_JOB\", function () {",
											"    pm.expect(jsonData.job).to.eql(expectedJob);",
											"});",
											"",
											"// Assert that the 'updatedAt' field is present",
											"pm.test(\"UpdatedAt field should be present\", function () {",
											"    pm.expect(jsonData).to.have.property('updatedAt');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var USER_ID = \"2\";",
											"pm.environment.set(\"USER_ID\", USER_ID);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{TEST_NAME}}\",\n    \"job\": \"{{TEST_JOB}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/users/{{USER_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{USER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User - invalid name format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Error message should be 'Invalid name format.'\", function () {",
											"    pm.expect(jsonData.error).to.eql('Invalid name format.');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var USER_ID = \"2\";",
											"pm.environment.set(\"USER_ID\", USER_ID);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": 121,\n    \"job\": \"{{TEST_JOB}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/users/{{USER_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{USER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User - non-existent user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Error message should be 'User not found.'\", function () {",
											"    pm.expect(jsonData.error).to.eql('User not found.');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{TEST_NAME}}\",\n    \"job\": \"{{TEST_JOB}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/users/:id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1000000000000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete User",
					"item": [
						{
							"name": "Delete User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var USER_ID = \"2\";",
											"pm.environment.set(\"USER_ID\", USER_ID);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL}}/users/{{USER_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"{{USER_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User - no user ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL}}/users/:id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User - non-existent user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL}}/users/:id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "10000000000"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}